# ComputaCo

- There is initially only one agent, the organizer
- The user can converse with any agent
- The organizer develops a strategy which may involve creating new agents

## Example Strategies

### Waterfall SDLC

```python
customer = human
requirements = establish_requirements(customer)
design = establish_design(requirements)
code = write_code(design)
tests = write_tests(code)
results = run_tests(tests)
documentation = write_documentation(results)
```

### Agile SDLC

```python
customer = human
requirements = establish_requirements(customer)



Human: "I want a website"

#####################################################3

```

running directory

artifact directories

```

and for repos built by ai, maybe the running directory should be `artifact_dir/.computacode`

###########################################################

- Modality is hard to abstract away
- GUI agents and LLM agents
- Some tasks are better for pure LLM's and others are better for pure GUI models
- But there can be a VisionToCaption wrapper to let LLM's "see"
- (The GUI models don't need a wrapper since they alrady accept text)
- But I think i'd like more standardized interfaces anyway

LanguageTool

VisionLanguageTool


